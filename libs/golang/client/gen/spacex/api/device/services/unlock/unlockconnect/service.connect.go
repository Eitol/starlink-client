// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: spacex/api/device/services/unlock/service.proto

package unlockconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	unlock "github.com/Eitol/starlink-client/libs/golang/client/gen/spacex/api/device/services/unlock"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UnlockServiceName is the fully-qualified name of the UnlockService service.
	UnlockServiceName = "SpaceX.API.Device.Services.Unlock.UnlockService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UnlockServiceStartUnlockProcedure is the fully-qualified name of the UnlockService's StartUnlock
	// RPC.
	UnlockServiceStartUnlockProcedure = "/SpaceX.API.Device.Services.Unlock.UnlockService/StartUnlock"
	// UnlockServiceFinishUnlockProcedure is the fully-qualified name of the UnlockService's
	// FinishUnlock RPC.
	UnlockServiceFinishUnlockProcedure = "/SpaceX.API.Device.Services.Unlock.UnlockService/FinishUnlock"
)

// UnlockServiceClient is a client for the SpaceX.API.Device.Services.Unlock.UnlockService service.
type UnlockServiceClient interface {
	StartUnlock(context.Context, *connect.Request[unlock.StartUnlockRequest]) (*connect.Response[unlock.StartUnlockResponse], error)
	FinishUnlock(context.Context, *connect.Request[unlock.FinishUnlockRequest]) (*connect.Response[unlock.FinishUnlockResponse], error)
}

// NewUnlockServiceClient constructs a client for the
// SpaceX.API.Device.Services.Unlock.UnlockService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUnlockServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UnlockServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	unlockServiceMethods := unlock.File_spacex_api_device_services_unlock_service_proto.Services().ByName("UnlockService").Methods()
	return &unlockServiceClient{
		startUnlock: connect.NewClient[unlock.StartUnlockRequest, unlock.StartUnlockResponse](
			httpClient,
			baseURL+UnlockServiceStartUnlockProcedure,
			connect.WithSchema(unlockServiceMethods.ByName("StartUnlock")),
			connect.WithClientOptions(opts...),
		),
		finishUnlock: connect.NewClient[unlock.FinishUnlockRequest, unlock.FinishUnlockResponse](
			httpClient,
			baseURL+UnlockServiceFinishUnlockProcedure,
			connect.WithSchema(unlockServiceMethods.ByName("FinishUnlock")),
			connect.WithClientOptions(opts...),
		),
	}
}

// unlockServiceClient implements UnlockServiceClient.
type unlockServiceClient struct {
	startUnlock  *connect.Client[unlock.StartUnlockRequest, unlock.StartUnlockResponse]
	finishUnlock *connect.Client[unlock.FinishUnlockRequest, unlock.FinishUnlockResponse]
}

// StartUnlock calls SpaceX.API.Device.Services.Unlock.UnlockService.StartUnlock.
func (c *unlockServiceClient) StartUnlock(ctx context.Context, req *connect.Request[unlock.StartUnlockRequest]) (*connect.Response[unlock.StartUnlockResponse], error) {
	return c.startUnlock.CallUnary(ctx, req)
}

// FinishUnlock calls SpaceX.API.Device.Services.Unlock.UnlockService.FinishUnlock.
func (c *unlockServiceClient) FinishUnlock(ctx context.Context, req *connect.Request[unlock.FinishUnlockRequest]) (*connect.Response[unlock.FinishUnlockResponse], error) {
	return c.finishUnlock.CallUnary(ctx, req)
}

// UnlockServiceHandler is an implementation of the SpaceX.API.Device.Services.Unlock.UnlockService
// service.
type UnlockServiceHandler interface {
	StartUnlock(context.Context, *connect.Request[unlock.StartUnlockRequest]) (*connect.Response[unlock.StartUnlockResponse], error)
	FinishUnlock(context.Context, *connect.Request[unlock.FinishUnlockRequest]) (*connect.Response[unlock.FinishUnlockResponse], error)
}

// NewUnlockServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUnlockServiceHandler(svc UnlockServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	unlockServiceMethods := unlock.File_spacex_api_device_services_unlock_service_proto.Services().ByName("UnlockService").Methods()
	unlockServiceStartUnlockHandler := connect.NewUnaryHandler(
		UnlockServiceStartUnlockProcedure,
		svc.StartUnlock,
		connect.WithSchema(unlockServiceMethods.ByName("StartUnlock")),
		connect.WithHandlerOptions(opts...),
	)
	unlockServiceFinishUnlockHandler := connect.NewUnaryHandler(
		UnlockServiceFinishUnlockProcedure,
		svc.FinishUnlock,
		connect.WithSchema(unlockServiceMethods.ByName("FinishUnlock")),
		connect.WithHandlerOptions(opts...),
	)
	return "/SpaceX.API.Device.Services.Unlock.UnlockService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UnlockServiceStartUnlockProcedure:
			unlockServiceStartUnlockHandler.ServeHTTP(w, r)
		case UnlockServiceFinishUnlockProcedure:
			unlockServiceFinishUnlockHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUnlockServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUnlockServiceHandler struct{}

func (UnimplementedUnlockServiceHandler) StartUnlock(context.Context, *connect.Request[unlock.StartUnlockRequest]) (*connect.Response[unlock.StartUnlockResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("SpaceX.API.Device.Services.Unlock.UnlockService.StartUnlock is not implemented"))
}

func (UnimplementedUnlockServiceHandler) FinishUnlock(context.Context, *connect.Request[unlock.FinishUnlockRequest]) (*connect.Response[unlock.FinishUnlockResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("SpaceX.API.Device.Services.Unlock.UnlockService.FinishUnlock is not implemented"))
}
