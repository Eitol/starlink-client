// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: spacex/api/device/device.proto

package deviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	device "github.com/Eitol/starlink-client/libs/golang/client/gen/spacex/api/device"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DeviceName is the fully-qualified name of the Device service.
	DeviceName = "SpaceX.API.Device.Device"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeviceStreamProcedure is the fully-qualified name of the Device's Stream RPC.
	DeviceStreamProcedure = "/SpaceX.API.Device.Device/Stream"
	// DeviceHandleProcedure is the fully-qualified name of the Device's Handle RPC.
	DeviceHandleProcedure = "/SpaceX.API.Device.Device/Handle"
)

// DeviceClient is a client for the SpaceX.API.Device.Device service.
type DeviceClient interface {
	Stream(context.Context) *connect.BidiStreamForClient[device.ToDevice, device.FromDevice]
	Handle(context.Context, *connect.Request[device.Request]) (*connect.Response[device.Response], error)
}

// NewDeviceClient constructs a client for the SpaceX.API.Device.Device service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeviceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeviceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	deviceMethods := device.File_spacex_api_device_device_proto.Services().ByName("Device").Methods()
	return &deviceClient{
		stream: connect.NewClient[device.ToDevice, device.FromDevice](
			httpClient,
			baseURL+DeviceStreamProcedure,
			connect.WithSchema(deviceMethods.ByName("Stream")),
			connect.WithClientOptions(opts...),
		),
		handle: connect.NewClient[device.Request, device.Response](
			httpClient,
			baseURL+DeviceHandleProcedure,
			connect.WithSchema(deviceMethods.ByName("Handle")),
			connect.WithClientOptions(opts...),
		),
	}
}

// deviceClient implements DeviceClient.
type deviceClient struct {
	stream *connect.Client[device.ToDevice, device.FromDevice]
	handle *connect.Client[device.Request, device.Response]
}

// Stream calls SpaceX.API.Device.Device.Stream.
func (c *deviceClient) Stream(ctx context.Context) *connect.BidiStreamForClient[device.ToDevice, device.FromDevice] {
	return c.stream.CallBidiStream(ctx)
}

// Handle calls SpaceX.API.Device.Device.Handle.
func (c *deviceClient) Handle(ctx context.Context, req *connect.Request[device.Request]) (*connect.Response[device.Response], error) {
	return c.handle.CallUnary(ctx, req)
}

// DeviceHandler is an implementation of the SpaceX.API.Device.Device service.
type DeviceHandler interface {
	Stream(context.Context, *connect.BidiStream[device.ToDevice, device.FromDevice]) error
	Handle(context.Context, *connect.Request[device.Request]) (*connect.Response[device.Response], error)
}

// NewDeviceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeviceHandler(svc DeviceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deviceMethods := device.File_spacex_api_device_device_proto.Services().ByName("Device").Methods()
	deviceStreamHandler := connect.NewBidiStreamHandler(
		DeviceStreamProcedure,
		svc.Stream,
		connect.WithSchema(deviceMethods.ByName("Stream")),
		connect.WithHandlerOptions(opts...),
	)
	deviceHandleHandler := connect.NewUnaryHandler(
		DeviceHandleProcedure,
		svc.Handle,
		connect.WithSchema(deviceMethods.ByName("Handle")),
		connect.WithHandlerOptions(opts...),
	)
	return "/SpaceX.API.Device.Device/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeviceStreamProcedure:
			deviceStreamHandler.ServeHTTP(w, r)
		case DeviceHandleProcedure:
			deviceHandleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeviceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeviceHandler struct{}

func (UnimplementedDeviceHandler) Stream(context.Context, *connect.BidiStream[device.ToDevice, device.FromDevice]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("SpaceX.API.Device.Device.Stream is not implemented"))
}

func (UnimplementedDeviceHandler) Handle(context.Context, *connect.Request[device.Request]) (*connect.Response[device.Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("SpaceX.API.Device.Device.Handle is not implemented"))
}
